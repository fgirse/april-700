{"version":3,"sources":["../../src/checkbox.tsx"],"names":["useFormControl","cx","useForkRef","__DEV__","React","useEffect","useRef","useCheckboxClass","useCheckboxLabelClass","Checkbox","forwardRef","props","ref","id","name","value","ariaLabel","ariaLabelledBy","ariaDescribedby","color","defaultChecked","checked","size","onChange","indeterminate","children","className","rest","disabled","invalid","readOnly","checkboxClasses","checkboxLabelClasses","ownRef","_ref","current","Boolean","undefined","displayName"],"mappings":"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","sourcesContent":["import { useFormControl } from \"@vechaiui/forms\";\nimport { cx, useForkRef, __DEV__ } from \"@vechaiui/utils\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport * as React from \"react\";\nimport { useEffect, useRef } from \"react\";\n\nimport { useCheckboxClass, useCheckboxLabelClass } from \"./styles\";\n\ninterface ICheckboxProps<T = HTMLInputElement> extends DefaultProps {\n  /* Makes checkbox disabled */\n  disabled?: React.InputHTMLAttributes<T>[\"disabled\"];\n  /* Makes checkbox invalid */\n  invalid?: boolean;\n  /* Makes checkbox required */\n  required?: React.InputHTMLAttributes<T>[\"required\"];\n  /* Makes checkbox readOnly */\n  readOnly?: React.InputHTMLAttributes<T>[\"readOnly\"];\n  /* Makes checkbox indeterminate */\n  indeterminate?: boolean;\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean;\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  checked?: boolean;\n  /* Checkbox id */\n  id?: string;\n  /* Checkbox name */\n  name?: string;\n  /* Checkbox value */\n  value?: string | number;\n  /* Set the checkbox color */\n  color?: string;\n  /* Size of the checkbox */\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  /**\n   * A11y: A label that describes the input\n   */\n  \"aria-label\"?: string;\n  /**\n   * A11y: The id of the element that describes the input\n   */\n  \"aria-describedby\"?: string;\n  /**\n   * A11y: Refers to the id of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string;\n  /**\n   * The children is the label to be displayed to the right of the checkbox.\n   */\n  children?: React.ReactNode;\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n}\n\nexport type CheckboxProps = ICheckboxProps &\n  React.HTMLAttributes<HTMLInputElement>;\n\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  (props, ref) => {\n    const {\n      id,\n      name,\n      value,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedby,\n      color = \"primary\",\n      defaultChecked,\n      checked,\n      size = \"md\",\n      onChange,\n      indeterminate,\n      children,\n      className,\n      ...rest\n    } = props;\n\n    const { disabled, invalid, readOnly } = useFormControl(props);\n\n    const checkboxClasses = useCheckboxClass({\n      size,\n      disabled,\n    });\n\n    const checkboxLabelClasses = useCheckboxLabelClass({ size });\n\n    const ownRef = useRef();\n    const _ref = useForkRef(ownRef, ref);\n\n    useEffect(() => {\n      // @ts-ignore\n      if (ownRef.current) {\n        // @ts-ignore\n        ownRef.current.indeterminate = Boolean(indeterminate);\n      }\n    }, [indeterminate, _ref]);\n\n    return (\n      <label\n        className={cx(\n          \"inline-flex align-top items-center cursor-base\",\n          disabled && \"cursor-not-allowed\"\n        )}\n      >\n        <input\n          type=\"checkbox\"\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={ariaDescribedby}\n          id={id}\n          ref={_ref}\n          name={name}\n          value={value}\n          onChange={readOnly ? undefined : onChange}\n          defaultChecked={readOnly ? undefined : defaultChecked}\n          checked={\n            readOnly ? Boolean(checked) : defaultChecked ? undefined : checked\n          }\n          disabled={disabled}\n          aria-disabled={disabled}\n          readOnly={readOnly}\n          aria-readonly={readOnly}\n          aria-invalid={invalid}\n          aria-checked={indeterminate ? \"mixed\" : checked}\n          data-color={color ? color : undefined}\n          className={cx(\n            checkboxClasses,\n            readOnly || disabled ? \"opacity-80\" : \"opacity-100\",\n            className\n          )}\n          {...rest}\n        />\n        {children && (\n          <span\n            className={cx(\n              checkboxLabelClasses,\n              readOnly || disabled ? \"opacity-40\" : \"opacity-100\"\n            )}\n          >\n            {children}\n          </span>\n        )}\n      </label>\n    );\n  }\n);\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}\n"],"file":"checkbox.js"}