{"version":3,"sources":["../../src/checkbox-group.tsx"],"names":["CheckboxGroup","React","forwardRef","props","ref","onChange","name","color","size","defaultValue","inline","valueProp","value","children","rest","values","setValues","isControlled","current","_values","_onChange","event","target","checked","newValues","filter","val","fallbackName","_name","validChildren","clones","map","child","index","className","includes","__DEV__","displayName"],"mappings":";;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;AAwCO,IAAMA,aAAa,gBAAGC,KAAK,CAACC,UAAN,CAC3B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACd,MACEC,QADF,GAUIF,KAVJ,CACEE,QADF;AAAA,MAEEC,IAFF,GAUIH,KAVJ,CAEEG,IAFF;AAAA,MAGEC,KAHF,GAUIJ,KAVJ,CAGEI,KAHF;AAAA,MAIEC,IAJF,GAUIL,KAVJ,CAIEK,IAJF;AAAA,MAKEC,YALF,GAUIN,KAVJ,CAKEM,YALF;AAAA,MAMEC,MANF,GAUIP,KAVJ,CAMEO,MANF;AAAA,MAOSC,SAPT,GAUIR,KAVJ,CAOES,KAPF;AAAA,MAQEC,QARF,GAUIV,KAVJ,CAQEU,QARF;AAAA,MASKC,IATL,iCAUIX,KAVJ;;AAWA,kBAA4B,oBAASM,YAAY,IAAI,EAAzB,CAA5B;AAAA,MAAOM,MAAP;AAAA,MAAeC,SAAf;;AAEA,gBAAkC,kBAAOL,SAAS,IAAI,IAApB,CAAlC;AAAA,MAAiBM,YAAjB,WAAQC,OAAR;;AACA,MAAMC,OAAO,GAAGF,YAAY,GAAGN,SAAH,GAAeI,MAA3C;;AAEA,MAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAgD;AAChE,wBAA2BA,KAAK,CAACC,MAAjC;AAAA,QAAQC,OAAR,iBAAQA,OAAR;AAAA,QAAiBX,KAAjB,iBAAiBA,KAAjB;AACA,QAAIY,SAAJ;;AACA,QAAID,OAAJ,EAAa;AACXC,MAAAA,SAAS,aAAQL,OAAO,IAAI,EAAnB,GAAwBP,KAAxB,EAAT;AACD,KAFD,MAEO;AACLY,MAAAA,SAAS,GAAG,CAACL,OAAO,IAAI,EAAZ,EAAgBM,MAAhB,CAAuB,UAACC,GAAD;AAAA,eAASA,GAAG,KAAKd,KAAjB;AAAA,OAAvB,CAAZ;AACD;;AAED,KAACK,YAAD,IAAiBD,SAAS,CAACQ,SAAD,CAA1B;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,SAAD,CAApB;AACD,GAXD,CAjBc,CA8Bd;;;AACA,MAAMG,YAAY,iBAAe,oBAAjC;;AACA,MAAMC,KAAK,GAAGtB,IAAI,IAAIqB,YAAtB;;AAEA,MAAME,aAAa,GAAG,6BAAiBhB,QAAjB,CAAtB;AAEA,MAAMiB,MAAM,GAAGD,aAAa,CAACE,GAAd,CAAkB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACjD,wBACE;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,SAAS,EAAE,eACTvB,MAAM,GAAG,cAAH,GAAoB,OADjB,EAETsB,KAAK,CAAC7B,KAAN,CAAY+B,SAFH;AAFb,oBAOG,wBAAaF,KAAb,EAAoB;AACnBxB,MAAAA,IAAI,EAAEA,IADa;AAEnBD,MAAAA,KAAK,EAAEyB,KAAK,CAAC7B,KAAN,CAAYI,KAAZ,IAAqBA,KAFT;AAGnBD,MAAAA,IAAI,EAAKsB,KAAL,SAAcK,KAHC;AAInB5B,MAAAA,QAAQ,EAAEe,SAJS;AAKnBG,MAAAA,OAAO,EAAE,CAACJ,OAAO,IAAI,EAAZ,EAAgBgB,QAAhB,CAAyBH,KAAK,CAAC7B,KAAN,CAAYS,KAArC;AALU,KAApB,CAPH,CADF;AAiBD,GAlBc,CAAf;AAoBA,sBACE;AAAK,IAAA,IAAI,EAAC,OAAV;AAAkB,IAAA,GAAG,EAAER;AAAvB,KAAgCU,IAAhC,GACGgB,MADH,CADF;AAKD,CA9D0B,CAAtB;;;AAiEP,IAAIM,cAAJ,EAAa;AACXpC,EAAAA,aAAa,CAACqC,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import { useId } from \"@reach/auto-id\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\nimport { cloneElement, useRef, useState } from \"react\";\n\nimport { CheckboxProps } from \"./checkbox\";\n\nexport interface CheckboxGroupProps extends DefaultProps {\n  /**\n   * The id of the checkbox group.\n   */\n  id?: CheckboxProps[\"id\"];\n  /**\n   * The name of the checkbox group. This prop is passed to each checbox\n   */\n  name?: CheckboxProps[\"name\"];\n  /**\n   * The content of the checkbox group. Must be the `Checkbox` component\n   */\n  children?: React.ReactNode;\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: Array<CheckboxProps[\"value\"]>;\n  /**\n   * The value of the checkbox group\n   */\n  value?: Array<CheckboxProps[\"value\"]>;\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?: (value: Array<CheckboxProps[\"value\"]>) => void;\n  /**\n   * If `true`, the checkboxes will aligned horizontally.\n   */\n  inline?: boolean;\n  /* Size of all wrapped checkbox */\n  size?: CheckboxProps[\"size\"];\n  /* Color of all wrapped checkbox */\n  color?: CheckboxProps[\"color\"];\n}\n\nexport const CheckboxGroup = React.forwardRef<HTMLDivElement, CheckboxGroupProps>(\n  (props, ref) => {\n    const {\n      onChange,\n      name,\n      color,\n      size,\n      defaultValue,\n      inline,\n      value: valueProp,\n      children,\n      ...rest\n    } = props;\n    const [values, setValues] = useState(defaultValue || []);\n\n    const { current: isControlled } = useRef(valueProp != null);\n    const _values = isControlled ? valueProp : values;\n\n    const _onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { checked, value } = event.target;\n      let newValues;\n      if (checked) {\n        newValues = [...(_values || []), value];\n      } else {\n        newValues = (_values || []).filter((val) => val !== value);\n      }\n\n      !isControlled && setValues(newValues);\n      onChange && onChange(newValues);\n    };\n\n    // If no name is passed, we'll generate a random, unique name\n    const fallbackName = `checkbox-${useId()}`;\n    const _name = name || fallbackName;\n\n    const validChildren = getValidChildren(children);\n\n    const clones = validChildren.map((child, index) => {\n      return (\n        <div\n          key={index}\n          className={cx(\n            inline ? \"inline-block\" : \"block\",\n            child.props.className\n          )}\n        >\n          {cloneElement(child, {\n            size: size,\n            color: child.props.color || color,\n            name: `${_name}-${index}`,\n            onChange: _onChange,\n            checked: (_values || []).includes(child.props.value),\n          })}\n        </div>\n      );\n    });\n\n    return (\n      <div role=\"group\" ref={ref} {...rest}>\n        {clones}\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\";\n}\n"],"file":"checkbox-group.js"}