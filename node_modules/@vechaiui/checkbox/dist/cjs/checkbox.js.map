{"version":3,"sources":["../../src/checkbox.tsx"],"names":["Checkbox","React","forwardRef","props","ref","id","name","value","ariaLabel","ariaLabelledBy","ariaDescribedby","color","defaultChecked","checked","size","onChange","indeterminate","children","className","rest","disabled","invalid","readOnly","checkboxClasses","checkboxLabelClasses","ownRef","_ref","current","Boolean","undefined","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { useFormControl } from \"@vechaiui/forms\";\nimport { cx, useForkRef, __DEV__ } from \"@vechaiui/utils\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport * as React from \"react\";\nimport { useEffect, useRef } from \"react\";\n\nimport { useCheckboxClass, useCheckboxLabelClass } from \"./styles\";\n\ninterface ICheckboxProps<T = HTMLInputElement> extends DefaultProps {\n  /* Makes checkbox disabled */\n  disabled?: React.InputHTMLAttributes<T>[\"disabled\"];\n  /* Makes checkbox invalid */\n  invalid?: boolean;\n  /* Makes checkbox required */\n  required?: React.InputHTMLAttributes<T>[\"required\"];\n  /* Makes checkbox readOnly */\n  readOnly?: React.InputHTMLAttributes<T>[\"readOnly\"];\n  /* Makes checkbox indeterminate */\n  indeterminate?: boolean;\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean;\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  checked?: boolean;\n  /* Checkbox id */\n  id?: string;\n  /* Checkbox name */\n  name?: string;\n  /* Checkbox value */\n  value?: string | number;\n  /* Set the checkbox color */\n  color?: string;\n  /* Size of the checkbox */\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  /**\n   * A11y: A label that describes the input\n   */\n  \"aria-label\"?: string;\n  /**\n   * A11y: The id of the element that describes the input\n   */\n  \"aria-describedby\"?: string;\n  /**\n   * A11y: Refers to the id of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string;\n  /**\n   * The children is the label to be displayed to the right of the checkbox.\n   */\n  children?: React.ReactNode;\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n}\n\nexport type CheckboxProps = ICheckboxProps &\n  React.HTMLAttributes<HTMLInputElement>;\n\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  (props, ref) => {\n    const {\n      id,\n      name,\n      value,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedby,\n      color = \"primary\",\n      defaultChecked,\n      checked,\n      size = \"md\",\n      onChange,\n      indeterminate,\n      children,\n      className,\n      ...rest\n    } = props;\n\n    const { disabled, invalid, readOnly } = useFormControl(props);\n\n    const checkboxClasses = useCheckboxClass({\n      size,\n      disabled,\n    });\n\n    const checkboxLabelClasses = useCheckboxLabelClass({ size });\n\n    const ownRef = useRef();\n    const _ref = useForkRef(ownRef, ref);\n\n    useEffect(() => {\n      // @ts-ignore\n      if (ownRef.current) {\n        // @ts-ignore\n        ownRef.current.indeterminate = Boolean(indeterminate);\n      }\n    }, [indeterminate, _ref]);\n\n    return (\n      <label\n        className={cx(\n          \"inline-flex align-top items-center cursor-base\",\n          disabled && \"cursor-not-allowed\"\n        )}\n      >\n        <input\n          type=\"checkbox\"\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={ariaDescribedby}\n          id={id}\n          ref={_ref}\n          name={name}\n          value={value}\n          onChange={readOnly ? undefined : onChange}\n          defaultChecked={readOnly ? undefined : defaultChecked}\n          checked={\n            readOnly ? Boolean(checked) : defaultChecked ? undefined : checked\n          }\n          disabled={disabled}\n          aria-disabled={disabled}\n          readOnly={readOnly}\n          aria-readonly={readOnly}\n          aria-invalid={invalid}\n          aria-checked={indeterminate ? \"mixed\" : checked}\n          data-color={color ? color : undefined}\n          className={cx(\n            checkboxClasses,\n            readOnly || disabled ? \"opacity-80\" : \"opacity-100\",\n            className\n          )}\n          {...rest}\n        />\n        {children && (\n          <span\n            className={cx(\n              checkboxLabelClasses,\n              readOnly || disabled ? \"opacity-40\" : \"opacity-100\"\n            )}\n          >\n            {children}\n          </span>\n        )}\n      </label>\n    );\n  }\n);\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}\n"],"file":"checkbox.js"}