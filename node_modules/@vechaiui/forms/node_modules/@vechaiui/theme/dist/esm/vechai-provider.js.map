{"version":3,"sources":["../../src/vechai-provider.tsx"],"names":["walkObject","omit","toRGB","deepmerge","React","createContext","useContext","useMemo","set","Global","defaultTheme","toCSSVar","isBrowser","VechaiContext","undefined","displayName","VechaiProvider","theme","colorScheme","density","cssVarsRoot","children","computedTheme","omittedTheme","colors","type","colorSchemes","document","documentElement","classList","add","remove","value","path","rgb","join","normalizedTheme","__cssVars","useVechai","Error","extendTheme","themeOverride","clone"],"mappings":";;AAAA,SACEA,UADF,EAEEC,IAFF,EAGEC,KAHF,EAIEC,SAJF,QAOO,iBAPP;AAQA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,QAAmD,OAAnD;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAKA,OAAO,IAAMC,aAAa,gBAAGR,aAAa,CAKxCS,SALwC,CAAnC;AAOPD,aAAa,CAACE,WAAd,GAA4B,eAA5B;AAUA,OAAO,SAASC,cAAT,OAMiB;AAAA,MANO;AAC7BC,IAAAA,KAAK,GAAGP,YADqB;AAE7BQ,IAAAA,WAAW,GAAG,OAFe;AAG7BC,IAAAA,OAAO,GAAG,aAHmB;AAI7BC,IAAAA,WAAW,GAAG,cAJe;AAK7BC,IAAAA;AAL6B,GAMP;AACtB,MAAMC,aAAa,GAAGf,OAAO,CAAC,MAAM;AAClC,QAAMgB,YAAY,GAAGtB,IAAI,CAACgB,KAAD,EAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAR,CAAzB;AACA,QAAM;AAAEO,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAmBR,KAAK,CAACS,YAAN,CAAmBR,WAAnB,KAAmC,EAA5D;;AACA,QAAIN,SAAJ,EAAe;AACb,UAAIa,IAAI,KAAK,MAAb,EAAqBE,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCC,GAAnC,CAAuC,MAAvC,EAArB,KACKH,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCE,MAAnC,CAA0C,MAA1C;AACN;;AAED/B,IAAAA,UAAU,CAACwB,MAAD,EAAS,CAACQ,KAAD,EAAQC,IAAR,KAAiB;AAClC,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC/B,UAAME,GAAG,GAAGhC,KAAK,CAAC8B,KAAD,CAAjB;AACA,UAAIE,GAAJ,EAAS1B,GAAG,CAACgB,MAAD,EAASS,IAAT,EAAeC,GAAG,CAACC,IAAJ,CAAS,GAAT,CAAf,CAAH;AACV,KAJS,CAAV;;AAMA,QAAMC,eAAe,gBAChBb,YADgB;AAEnBJ,MAAAA,OAAO,EAAEF,KAAK,CAACE,OAAN,CAAcA,OAAd,CAFU;AAGnBK,MAAAA;AAHmB,MAArB;;AAMA,WAAOb,QAAQ,CAACyB,eAAD,CAAf;AACD,GArB4B,EAqB1B,CAACnB,KAAD,EAAQC,WAAR,EAAqBC,OAArB,CArB0B,CAA7B;AAuBA,MAAMa,KAAK,GAAGzB,OAAO,CACnB,OAAO;AACLU,IAAAA,KAAK,EAAEK;AADF,GAAP,CADmB,EAInB,CAACA,aAAD,CAJmB,CAArB;AAOA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEU;AAA/B,kBAEE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAE,OAAO;AAAE,OAACZ,WAAD,GAAeE,aAAa,CAACe;AAA/B,KAAP;AAAhB,IAFF,EAGGhB,QAHH,CADF;AAOD;AAED,OAAO,SAASiB,SAAT,GAA8C;AACnD,MAAMrB,KAAK,GAAGX,UAAU,CACrBO,aADqB,CAAxB;;AAGA,MAAI,CAACI,KAAL,EAAY;AACV,UAAMsB,KAAK,CACT,4FADS,CAAX;AAGD;;AAED,SAAOtB,KAAP;AACD;AAED,OAAO,SAASuB,WAAT,CAAqBC,aAArB,EAAsE;AAC3E,SAAOtC,SAAS,CAACO,YAAD,EAAe+B,aAAf,EAA8B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA9B,CAAhB;AACD","sourcesContent":["import {\n  walkObject,\n  omit,\n  toRGB,\n  deepmerge,\n  WithCSSVar,\n  Dict,\n} from \"@vechaiui/utils\";\nimport * as React from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport set from \"lodash.set\";\nimport { Global } from \"@emotion/react\";\n\nimport { defaultTheme } from \"./default-theme\";\nimport { toCSSVar } from \"./create-theme-vars\";\nimport { isBrowser } from \"./utils\";\nimport { VechaiTheme, VechaiThemeOverride } from \"./types\";\n\ninterface DictVechaiTheme extends Dict {}\n\nexport const VechaiContext = createContext<\n  | {\n      theme: WithCSSVar<DictVechaiTheme>;\n    }\n  | undefined\n>(undefined);\n\nVechaiContext.displayName = \"VechaiContext\";\n\nexport interface VechaiProviderProps {\n  children: React.ReactNode;\n  theme?: VechaiTheme;\n  density?: \"compact\" | \"comfortable\" | \"unset\";\n  colorScheme?: string;\n  cssVarsRoot?: string;\n}\n\nexport function VechaiProvider({\n  theme = defaultTheme,\n  colorScheme = \"light\",\n  density = \"comfortable\",\n  cssVarsRoot = \":host, :root\",\n  children,\n}: VechaiProviderProps) {\n  const computedTheme = useMemo(() => {\n    const omittedTheme = omit(theme, [\"colorSchemes\", \"density\"]);\n    const { colors, type } = theme.colorSchemes[colorScheme] || {};\n    if (isBrowser) {\n      if (type === \"dark\") document.documentElement.classList.add(\"dark\");\n      else document.documentElement.classList.remove(\"dark\");\n    }\n\n    walkObject(colors, (value, path) => {\n      if (typeof value !== \"string\") return;\n      const rgb = toRGB(value);\n      if (rgb) set(colors, path, rgb.join(\",\"));\n    });\n\n    const normalizedTheme = {\n      ...omittedTheme,\n      density: theme.density[density],\n      colors,\n    };\n\n    return toCSSVar(normalizedTheme);\n  }, [theme, colorScheme, density]);\n\n  const value = useMemo(\n    () => ({\n      theme: computedTheme,\n    }),\n    [computedTheme]\n  );\n\n  return (\n    <VechaiContext.Provider value={value}>\n      {/* FIXME: Emotion alernative */}\n      <Global styles={() => ({ [cssVarsRoot]: computedTheme.__cssVars })} />\n      {children}\n    </VechaiContext.Provider>\n  );\n}\n\nexport function useVechai<T extends object = Dict>() {\n  const theme = useContext(\n    (VechaiContext as unknown) as React.Context<T | undefined>\n  );\n  if (!theme) {\n    throw Error(\n      \"useVechai: `theme` is undefined. Seems you forgot to wrap your app in `<VechaiProvider />`\"\n    );\n  }\n\n  return theme as WithCSSVar<T>;\n}\n\nexport function extendTheme(themeOverride: VechaiThemeOverride): VechaiTheme {\n  return deepmerge(defaultTheme, themeOverride, { clone: true }) as VechaiTheme;\n}\n"],"file":"vechai-provider.js"}