{"version":3,"sources":["../../src/vechai-provider.tsx"],"names":["VechaiContext","undefined","displayName","VechaiProvider","theme","defaultTheme","colorScheme","density","cssVarsRoot","children","computedTheme","omittedTheme","colorSchemes","colors","type","isBrowser","document","documentElement","classList","add","remove","value","path","rgb","join","normalizedTheme","__cssVars","useVechai","Error","extendTheme","themeOverride","clone"],"mappings":";;;;;;;;AAAA;;AAQA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAKO,IAAMA,aAAa,gBAAG,yBAK3BC,SAL2B,CAAtB;;AAOPD,aAAa,CAACE,WAAd,GAA4B,eAA5B;;AAUO,SAASC,cAAT,OAMiB;AAAA,wBALtBC,KAKsB;AAAA,MALtBA,KAKsB,2BALdC,0BAKc;AAAA,8BAJtBC,WAIsB;AAAA,MAJtBA,WAIsB,iCAJR,OAIQ;AAAA,0BAHtBC,OAGsB;AAAA,MAHtBA,OAGsB,6BAHZ,aAGY;AAAA,8BAFtBC,WAEsB;AAAA,MAFtBA,WAEsB,iCAFR,cAEQ;AAAA,MADtBC,QACsB,QADtBA,QACsB;AACtB,MAAMC,aAAa,GAAG,mBAAQ,YAAM;AAClC,QAAMC,YAAY,GAAG,iBAAKP,KAAL,EAAY,CAAC,cAAD,EAAiB,SAAjB,CAAZ,CAArB;;AACA,gBAAyBA,KAAK,CAACQ,YAAN,CAAmBN,WAAnB,KAAmC,EAA5D;AAAA,QAAQO,MAAR,SAAQA,MAAR;AAAA,QAAgBC,IAAhB,SAAgBA,IAAhB;;AACA,QAAIC,iBAAJ,EAAe;AACb,UAAID,IAAI,KAAK,MAAb,EAAqBE,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCC,GAAnC,CAAuC,MAAvC,EAArB,KACKH,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCE,MAAnC,CAA0C,MAA1C;AACN;;AAED,2BAAWP,MAAX,EAAmB,UAACQ,KAAD,EAAQC,IAAR,EAAiB;AAClC,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC/B,UAAME,GAAG,GAAG,kBAAMF,KAAN,CAAZ;AACA,UAAIE,GAAJ,EAAS,wBAAIV,MAAJ,EAAYS,IAAZ,EAAkBC,GAAG,CAACC,IAAJ,CAAS,GAAT,CAAlB;AACV,KAJD;;AAMA,QAAMC,eAAe,gBAChBd,YADgB;AAEnBJ,MAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcA,OAAd,CAFU;AAGnBM,MAAAA,MAAM,EAANA;AAHmB,MAArB;;AAMA,WAAO,+BAASY,eAAT,CAAP;AACD,GArBqB,EAqBnB,CAACrB,KAAD,EAAQE,WAAR,EAAqBC,OAArB,CArBmB,CAAtB;AAuBA,MAAMc,KAAK,GAAG,mBACZ;AAAA,WAAO;AACLjB,MAAAA,KAAK,EAAEM;AADF,KAAP;AAAA,GADY,EAIZ,CAACA,aAAD,CAJY,CAAd;AAOA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEW;AAA/B,kBAEE,oBAAC,cAAD;AAAQ,IAAA,MAAM,EAAE;AAAA;;AAAA,+BAAUb,WAAV,IAAwBE,aAAa,CAACgB,SAAtC;AAAA;AAAhB,IAFF,EAGGjB,QAHH,CADF;AAOD;;AAEM,SAASkB,SAAT,GAA8C;AACnD,MAAMvB,KAAK,GAAG,sBACXJ,aADW,CAAd;;AAGA,MAAI,CAACI,KAAL,EAAY;AACV,UAAMwB,KAAK,CACT,4FADS,CAAX;AAGD;;AAED,SAAOxB,KAAP;AACD;;AAEM,SAASyB,WAAT,CAAqBC,aAArB,EAAsE;AAC3E,SAAO,sBAAUzB,0BAAV,EAAwByB,aAAxB,EAAuC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAvC,CAAP;AACD","sourcesContent":["import {\n  walkObject,\n  omit,\n  toRGB,\n  deepmerge,\n  WithCSSVar,\n  Dict,\n} from \"@vechaiui/utils\";\nimport * as React from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport set from \"lodash.set\";\nimport { Global } from \"@emotion/react\";\n\nimport { defaultTheme } from \"./default-theme\";\nimport { toCSSVar } from \"./create-theme-vars\";\nimport { isBrowser } from \"./utils\";\nimport { VechaiTheme, VechaiThemeOverride } from \"./types\";\n\ninterface DictVechaiTheme extends Dict {}\n\nexport const VechaiContext = createContext<\n  | {\n      theme: WithCSSVar<DictVechaiTheme>;\n    }\n  | undefined\n>(undefined);\n\nVechaiContext.displayName = \"VechaiContext\";\n\nexport interface VechaiProviderProps {\n  children: React.ReactNode;\n  theme?: VechaiTheme;\n  density?: \"compact\" | \"comfortable\" | \"unset\";\n  colorScheme?: string;\n  cssVarsRoot?: string;\n}\n\nexport function VechaiProvider({\n  theme = defaultTheme,\n  colorScheme = \"light\",\n  density = \"comfortable\",\n  cssVarsRoot = \":host, :root\",\n  children,\n}: VechaiProviderProps) {\n  const computedTheme = useMemo(() => {\n    const omittedTheme = omit(theme, [\"colorSchemes\", \"density\"]);\n    const { colors, type } = theme.colorSchemes[colorScheme] || {};\n    if (isBrowser) {\n      if (type === \"dark\") document.documentElement.classList.add(\"dark\");\n      else document.documentElement.classList.remove(\"dark\");\n    }\n\n    walkObject(colors, (value, path) => {\n      if (typeof value !== \"string\") return;\n      const rgb = toRGB(value);\n      if (rgb) set(colors, path, rgb.join(\",\"));\n    });\n\n    const normalizedTheme = {\n      ...omittedTheme,\n      density: theme.density[density],\n      colors,\n    };\n\n    return toCSSVar(normalizedTheme);\n  }, [theme, colorScheme, density]);\n\n  const value = useMemo(\n    () => ({\n      theme: computedTheme,\n    }),\n    [computedTheme]\n  );\n\n  return (\n    <VechaiContext.Provider value={value}>\n      {/* FIXME: Emotion alernative */}\n      <Global styles={() => ({ [cssVarsRoot]: computedTheme.__cssVars })} />\n      {children}\n    </VechaiContext.Provider>\n  );\n}\n\nexport function useVechai<T extends object = Dict>() {\n  const theme = useContext(\n    (VechaiContext as unknown) as React.Context<T | undefined>\n  );\n  if (!theme) {\n    throw Error(\n      \"useVechai: `theme` is undefined. Seems you forgot to wrap your app in `<VechaiProvider />`\"\n    );\n  }\n\n  return theme as WithCSSVar<T>;\n}\n\nexport function extendTheme(themeOverride: VechaiThemeOverride): VechaiTheme {\n  return deepmerge(defaultTheme, themeOverride, { clone: true }) as VechaiTheme;\n}\n"],"file":"vechai-provider.js"}